var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁(靜態)：\xa0 https://mdewcm2024.github.io/1a-ag4/content/index.html \n 網誌: 請填入目前網站所在的 URL/blog,  https://mde.tw/cmsimde_site/blog \n 簡報: 請填入目前網站所在的 URL/reveal,  https://mde.tw/cmsimde_site/reveal \n 倉儲：\xa0 https://github.com/mdewcm2024/1a-ag4 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'W3', 'text': '在 WCM第三週 教學內容，整理重點。(都有放相關或參照連結) \n 1.關於 git常用 指。 \n 2.利用 Wink 建立操作影片。( 安裝下載檔 ) \n 3.如何使用 submoduie 來創建個人子模組。(導師操作觀念 影片 ) \n 4.說明如何使用replit維護網站。 \n \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': '本周內容： \n 1. 複習 W3 上課內容。 \n 2. Replit靜態網站檢視，下載 main2.txt 和 static.txt 取得main2.py和static.py，以便執行 python3 main2.py  就完成了。 \n 3. 使用replit Codespaces Gitpod三種網頁維護 執行動態和靜態網站和設定存取權。 \n 4. 使用 Replit 分組網站建立權限，因為無法幫定多人以上的倉儲帳號，所以需要成員們自行在 /home/runner/.ssh \xa0目錄下建立 \xa0id_rsa\xa0 與\xa0 config 。 (.ssh-keygen) \n 5. 先下載 miktex-portable.7z ，期中 期末時需要用 LaTeX 建立各組的報告， \n 6. 需將以下資料做統整： \n https://github.com/git-guides \n https://git-scm.com/book/zh-tw/v2 \n https://git-scm.com/book/zh/v2 \n A Tutorial for GitHub.pdf \n github學習資源 \n 統整結果請按 這裡 。 \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '事先預習上課 可能 會講解內容，了解 iframe 是什麼和 相關應用 。 \n 內容會以 iframe 來插入前幾周的教學影片，並摘要各影片內容。 \n --------------------------------------------------------------------------- \n 1.Replit分組平台倉儲設定。 \n \n 2.使用 可攜檔 裡的 Putty-solvespace.exe ( STL )，零件檢視方法。 \n \n 3.使用近端可攜程式，維護更新自己及分組倉儲。 \n \n 參考實作教學影片請到 youtube \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '完成課程實作操作： \n 1. 根據自己專業： \n \xa0 \xa01-1.)說明 git 的使用和與 ChatGPT 的對話 \n \xa0 \xa01-2.)內容需含git發展歷史 \n \xa0 \xa01-3.)創作人的履歷 \n \xa0 \xa01-4.)一般相同專業人士如何利用git解決內容管理問題？ \n 2. 如果想在Windows實際使用 demo git client 與 git server ，該如何進行？ \n 3. 練習 git init到git push ，個人自己建立倉儲分支環境練習上傳推送，並處理合併問題。 \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7-W8', 'text': '1. 課程介紹教育的理念本質。 \n 2. 影片嵌入 網站方法。 \n 以超連結配合個人網站內的Source code 將影片複製後的超連結貼上，連結內有預設影片邊界 來源拉取等，除非想有特別需要調整，一般基本只要將其貼上即可。 \n \n', 'tags': '', 'url': 'W7-W8.html'}, {'title': 'W9', 'text': '\n', 'tags': '', 'url': 'W9.html'}, {'title': 'W10', 'text': '以replit來維護新的分組倉儲，需要 應對問題為r eplit的.shh協定無法供免費使用者使用 ，已經透過github系統設定，現在可以直接在replit進行分組維護， \n replit目前只剩下對於使用者的 總資料儲存量 (10G)限制，當資源存取超過上限時，需要回到github下的對應倉儲帳號進行對應手段。 \n 新的分組專案網站： https://github.com/mdewcm2024/1astud-site \n (需在teams留言字串進行加入) \n', 'tags': '', 'url': 'W10.html'}, {'title': 'W11-W12', 'text': '所有學員需將分組的小組組別名稱(g4)新增至評分網站中的，為置於專案目錄下，之後將每位學員的關於本課程內容心得，新增至各組別下的目錄。 \n 這個過程中的困難點就是當多人在同時上傳(push)時，我們要如何應對。 \n 慢慢等人上傳後自己再上傳顯然是不合效率，所以需以課程所學來應對衝突問題。 \n 這裡就是需要利用 分支 處理衝突問題，雖然在上傳時如果當下自己的版本不是最新的，一樣需要將最新的版本git pull下來，然後進入動態網站進行衝突/合併，解決完後才能夠git push上去。 \n 分支：就是在當下的版本的另一條屬於自己的版本，比如說是原本一條的河流，突然變成兩條(甚至以上)，他們在本質上是屬於同一支源流，但每個分支出來會呈現的形式都是不同，最終都會匯聚至大海，而大海就是我們衝突裡的主流，每個人在自己的分支裡做自己想做的，最後要統整合併為一個主流，將每次上傳時都可能遇到的處理衝突問題次數降低。 \n ------------------------------------------------------------------------------------------------- \n 1. 開始複習加深前幾周所教學內容 \n 2. 評分網站在 git pull 處理要點 \n 如果自己不是最新版本，在pull後內容會顯示新增 修改的內容 \n WSGIserver( Web Server Gateway Interface )： 具有高效、易於使用和可擴展性等特點，是 Python 中用於定義 Web 應用程序與 Web 服務器之間通信的標準界面。( 參考 ) \n 3. 導師心得評語，修改評分網站中個人心得 \n 4. 提到學校網站利用 php ( P HP:\xa0 H ypertext\xa0 P reprocessor )所編寫，提到課程內容進階的關於學校網站排課系統 \n 5. 安裝Claude，AI程式聊天 \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'W11-W12.html'}, {'title': 'W13', 'text': '1. 從教務處主機直接擷取資料 \n 2. 將擷取下來的資料以近端形式持續保留在頁面 \n 3. 猜數字遊戲 \n', 'tags': '', 'url': 'W13.html'}, {'title': 'W14', 'text': '1. 複習w14週前課程內容 \n 2. 猜數字程式利用claude(或GPT)了解每段詳情及出處 \n 3. 將猜數字遊戲在近端進行執行 \n', 'tags': '', 'url': 'W14.html'}, {'title': 'W15-W16', 'text': '十五週開始將以個人和各組的專案內容開始的自由時間，導師提到的課程內容為前幾週的課程重點複習講解跟如何更容易的將個人的網誌(code)以別的方式(近端程式)匯出。 \n 十六週課程內容 為： \n 1. 在規定時間內填寫 導師網站 倉儲的問卷回答。(Discussions裡的第一項) \n 2. 依個人各組繼續進行期末作業 \n \n', 'tags': '', 'url': 'W15-W16.html'}, {'title': 'Git Tutorial', 'text': 'git是什麼？ \n 版本控制是一種記錄一個或若干 文件內容變化 ，以便將來 查閱特定版本修訂情況 的系統。\xa0 \n \n 為什麼要使用git？ \n git 是指版本控制系統(Distributed Version Control)，然而他要用來做什麼呢? \n git 具有以下優點： 1. 速度 \n 2. 簡單的設計 \n 3. 對非線性開發模式的強力支持（允許成千上萬個併行開發的分支) \n 4. 完全分布式 \n 5. 有能力高效管理類似 Linux 内核一樣的超大規模項目（速度和數據量） \n 而git 的用途就是 記錄每一個檔案的每次更新，防止被覆蓋或者遺失檔案告成損失。 \n \n git的優勢是什麼？ \n 有人把 Git 的分支模型稱為它的“必殺技特性”，也因為這一特性，使得 Git 從眾多版本控制系統中脫穎而出。 為何 Git 的分支模型如此出眾？  Git 處理分支的方式可謂是難以置信的輕量，創建新分支這一操作幾乎能在瞬間完成，並且在不同分支之間的切換操作也是一樣便捷。 與許多其它版本控制系統不同，Git 鼓勵在工作流程中頻繁地使用分支與合併，即使在一天之內進行許多次。  理解並精通這一特性，你便會意識到 Git 是如此的強大而又獨特，並且從此真正改變你的開發方式。 \n \n git的使用？ \n git有以下幾點的功能 \n 1. 查看遠端倉儲 \n 2. 添加遠端倉儲 \n 3. 從遠端倉儲中抓取與拉取 \n 4. 推送到遠端倉儲 \n 5. 查看某個遠端倉儲 \n 6. 遠端倉儲的重命名與刪除 \n \n git 的指令？ \n git常用指令有： \n git add . \xa0 (新增) \n git commit -m  "內容" \xa0 (提交及名稱) \n git\xa0 push \xa0(推送) \n git version \xa0(查詢目前所使用的 git 版本) \n git status \xa0(一般是用來檢查目前近端改版情況) \n 若在遠端倉儲已經改版了，就必須先 git pull ，將遠端資訊與自己的合併更新，才能在提交新的版本推送至倉儲。 \n git pull=git fetch + git merge \n git\xa0fetch \xa0(將遠端主機的最新內容拉到本地)， git\xa0merge \xa0(用於從指定的commit合併到當前分支) \n git submodule add  自己倉儲網址.git+學號 \xa0(新增分組倉儲的子模組) \n git clone --recurse-submodules\xa0(.git 指定目錄與否) \n \n git總結: \n 1. 版本控制: Git允許您輕鬆地追蹤和管理代碼的變化，可以更容易回退到先前版本或比較不同版本之間的差異。 \n 2. 多人協作與合併:多人協作時，Git使得合併不同的分支變得更加容易和安全。 \n 3. 分支管理:可以輕鬆創建、合併或刪除分支。 \n 4. 遠程儲存和共享:可將代碼庫儲存在git，可使共享代碼儲存更加方便 \n 5. 個人化配置:git內建許多配置選項，可根據自己的需求進行配置 \n \n \n', 'tags': '', 'url': 'Git Tutorial.html'}, {'title': '期中報告', 'text': '題目： Brython 程式應用 \n Brython 是什麼： \n Brython 是一種 Python 在瀏覽器端的實現，它允許你在瀏覽器中直接運行 Python 代碼。這意味著你可以使用 Python 來編寫客戶端的 Web 應用程序，而無需使用 JavaScript。Brython 實際上是一個 Python 解釋器，它被編譯成 JavaScript 並在瀏覽器中執行。這使得開發者可以利用 Python 的簡潔和易用性來構建交互式的 Web 應用程序，同時無需擔心客戶端與伺服器端之間的語言差異。 \n \n Brython實作： \n \n Brython 程式應用.pdf \n \n \n', 'tags': '', 'url': '期中報告.html'}, {'title': '期末報告', 'text': '題目：javascript研究 \n javascript是什麼： \n JavaScript是一種廣泛用於網頁開發的程式語言，主要特點包括： \n \n \n 動態語言 ：JavaScript是一種解釋性語言，程式碼在瀏覽器中執行時被即時解釋和執行，不需要提前編譯。 \n \n \n 前端開發 ：JavaScript最常用於前端開發，與HTML和CSS一起使用來創建互動和動態的網頁內容。通過JavaScript，開發者可以操控網頁的元素、處理用戶輸入，以及與伺服器通訊。 \n \n \n 跨平台 ：JavaScript可以在不同的操作系統和瀏覽器上運行，無需更改程式碼，大大提升了其通用性。 \n \n \n 事件驅動 ：JavaScript常用於處理用戶事件，如點擊、懸停、提交表單等，使網頁可以響應用戶的操作。 \n \n \n 廣泛的庫和框架 ：有許多流行的JavaScript庫和框架（如React、Angular、Vue.js）可以幫助開發者更高效地構建複雜的用戶界面和單頁應用（SPA）。 \n \n \n 伺服器端開發 ：通過Node.js，JavaScript也可以用於伺服器端編程，支持構建全棧應用。 \n \n \n 總結JavaScript是一個功能強大且靈活的語言，它在現代網頁開發中扮演著不可或缺的角色。無論是構建簡單的互動網頁，還是開發複雜的Web應用，JavaScript都是開發者的必備工具。 \n JavaScript 與其他程式語言差別在哪： \n 1. **類型**：  - JavaScript是一種動態類型語言，允許變數在運行時根據上下文自動更改類型。  - 許多其他語言（如Java、C++、Python）是靜態類型語言，變數類型在編譯時或定義時確定，並且通常不能隨意更改。 \n 2. **執行環境**：  - JavaScript通常用於瀏覽器中，用於為網頁添加交互性和動態功能。  - 其他語言可以在各種環境中運行，例如Java通常用於後端伺服器開發，Python可用於數據分析、科學計算等。 \n 3. **異步編程模型**：  - JavaScript廣泛使用異步編程模型，通過回調、Promise和async/await來處理異步操作，如網絡請求或定時器。  - 一些其他語言也支持異步編程，但在語言級別上可能不如JavaScript方便。 \n 4. **原型繼承**：  - JavaScript使用原型繼承模型來實現對象之間的繼承關係，與傳統的類繼承方式不同。  - 其他語言通常使用類和對象來實現繼承。 \n 5. **閉包和作用域**：  - JavaScript具有語法作用域，允許創建閉包，這是一種函數可以訪問其外部作用域中變數的能力。  - 其他語言也支持閉包和作用域，但可能有不同的實現方式。 \n 6. **語法**：  - JavaScript的語法與其他語言可能有所不同，例如函數式編程風格的支持、動態創建和執行程式碼的能力等。 \n 7. **內存管理**：  - JavaScript具有自動內存管理（垃圾收集），開發人員不需要顯式地分配或釋放內存。  - 其他語言可能需要開發人員手動管理內存。 \n 8. **標準庫和生態系統**：  - JavaScript具有豐富的標準庫和生態系統，可用於構建各種類型的應用程序。  - 其他語言也有自己的標準庫和生態系統，但特點和功能可能有所不同。 \n \n \n javascript的應用： \n', 'tags': '', 'url': '期末報告.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': '如果要使用 replit 編輯網站，必須在 動態編輯頁面 設定 .ssh下的id_rsa與config 。 \n 若要簡單點請觀看 這個影片 。 \n \n https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'member', 'text': '小組成員名單 倉儲 網站 \n 組長： \n 41223150 \xa0網頁 \n 組員： \n 41223110 \xa0 網頁 \n 41223118   網頁 \n 41223130 \xa0 網頁 \n 41223140 \xa0 網頁 \n 41223144 \xa0 網頁 \n', 'tags': '', 'url': 'member.html'}, {'title': 'file', 'text': 'portable_2024.7z \xa0可攜程式環境檔 \n main2.txt \xa0 replit靜態執行所檔案程式 \n static.txt \xa0replit靜態執行所檔案程式 \n miktex-portable.7z \xa0 期中與期末使用 LaTeX 的檔案 \n Wink.exe \xa0影片安裝檔 \n \n', 'tags': '', 'url': 'file.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};